1. T(N) = 2T(N-1) + 1
T(N - 1) = 2T(n - 2) + 1
T(N - 2) = 2T(n - 3) + 1

T(n) = 2(2T(n-2) + 1) + 1 = 4T(n - 2) + 3
T(n) = 4(2T(n - 3) + 1) + 3
T(n) = 8T(n-3) + 7

T(n) = (2^k)T(n - k) + (2^k) - 1

If n - k = 0
n = k
T(n) = 2T(0) + 1
T(n) = 2 + 1 = 3

Time complexity: Θ(1)  


2. T(N) = 3T(N-1) + n 
Decreasing function
a = 3, a > 1
f(n) = n = O(n^1)
O((n^1) * a^(n/1)) = O(n*3^n)

Time Complexity: Θ(n(3^n))


3. T(N) = 9T(N/2) + n^2
Divide and Conquer
a = 9, a >= 1
b = 2, b > 1
f(n) = n^2, k = 2
log2(9) = 3.17 > 2

Time Complexity: Θ(n^log2(9))

4. T(N) = 100T(N/2) + n^(log2(cn) + 1)

