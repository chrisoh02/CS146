1. T(N) = 2T(N-1) + 1
T(N - 1) = 2T(n - 2) + 1
T(N - 2) = 2T(n - 3) + 1

T(n) = 2(2T(n-2) + 1) + 1 = 4T(n - 2) + 3
T(n) = 4(2T(n - 3) + 1) + 3
T(n) = 8T(n-3) + 7

T(n) = (2^k)T(n - k) + (2^k) - 1

If n - k = 0
n = k
T(n) = 2^nT(0) + 2^n - 1
T(n) = 2(2^n) - 1 = 2^(n + 1) - 1

Time complexity: Θ(2^n)  


2. T(N) = 3T(N-1) + n 
Decreasing function
a = 3, a > 1
f(n) = n = n^1, k = 1
O((n^1) * a^(n/1)) = O(n*3^n)

Time Complexity: Θ(n(3^n))


3. T(N) = 9T(N/2) + n^2
Divide and Conquer
a = 9, a >= 1
b = 2, b > 1
f(n) = n^2, k = 2
log2(9) = 3.17 (approx) > 2

Time Complexity: Θ(n^log2(9)), or roughly Θ(n^3.17)


4. T(N) = 100T(N/2) + n^(log2(cn) + 1)
Divide and Conquer
a = 100, a >= 1
b = 2, b > 1
f(n) = n^(log2(cn) + 1), k = log2(cn) + 1
log2(100) = 6.64 (approx)

Comparing k with log2(100)
log2(cn) + log2(2) = log2(100) 
log2(cn) = log2(100) - log2(2) = log2(50)
2^log2(cn) = 2^log2(50)
cn = 50


5. T(N) = 4T(N/2) + (n^2)(log n)
a = 4, a >= 1
b = 2, b > 1
f(n) = (n^2)(log n), k = 2, p = 1

log2(4) = 2 = k
p = 1 > -1, so Θ((n^k)(log n)^(p + 1))

Time Complexity: Θ((n^2)(log n)^2)


6. T(N) = 5T(N/2) + (n^2)/(log n)
a = 5, a >= 1
b = 2, b > 1
f(n) = (n^2)/(log n), k = 2, p = -1

log2(5) = 2.32 (approx) > k
So Θ(n^loga(b))

Time Complexity:  Θ(n^log2(5) or roughly Θ(n^2.32)

